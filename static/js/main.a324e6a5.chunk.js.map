{"version":3,"sources":["api/api.js","components/FloorPlan/FloorPlan.jsx","components/UserList/Image.jsx","components/UserList/UserList.jsx","App.js","reportWebVitals.js","index.js"],"names":["_token","instance","axios","baseURL","api","getToken","get","auth","username","password","then","response","data","access_token","getAllPeople","headers","Authorization","people","map","human","name","midname","surname","image_ref","getImage","responseType","buffer","Buffer","from","toString","FloorPlan","floor","MapContainer","center","zoom","minZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","url","GeoJSON","React","memo","Image","useState","state","setstate","useEffect","a","shape","size","src","UserList","allPeople","console","log","length","loading","setLoading","columns","title","dataIndex","key","render","text","row","index","dataSource","pagination","defaultPageSize","bordered","App","setAllPeople","className","justify","span","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a324e6a5.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst username = 'fetest';\r\nconst password = 'root123456';\r\nlet _token;\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://213.184.245.66:5010',\r\n});\r\n\r\nconst _getPeople = (people) => {\r\n    return people.map((human) => {\r\n        return {\r\n            name: `${human.name} ${human.midname} ${human.surname}`,\r\n            image_ref: human.image_ref\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const api = {\r\n    getToken() {\r\n        return instance.get(`/login`, {\r\n            auth: { username, password }\r\n        }).then(response => {\r\n            _token = response.data.access_token;\r\n        })\r\n    },\r\n    getAllPeople() {\r\n        return instance.get(`/api/get_all_people`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + _token\r\n            }\r\n        }).then(response => _getPeople(response.data.data.people));\r\n    },\r\n    getImage(image_ref) {\r\n        return instance.get(image_ref, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + _token,\r\n            },\r\n            responseType: 'arraybuffer'\r\n        }).then((response) => {\r\n            let buffer = Buffer.from(response.data, 'binary').toString('base64')\r\n            return `data:image/bmp;base64,${buffer}`;\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { MapContainer, GeoJSON } from 'react-leaflet';\r\n\r\nconst FloorPlan = ({ floor }) => {\r\n    return (\r\n        <div>\r\n            <MapContainer\r\n                center={[53.91712919154794, 27.63486423374176]}// 53.91687819154794 27.63435423374176\r\n                zoom={19.5}\r\n                minZoom={19}\r\n                attributionControl={true}\r\n                zoomControl={true}\r\n                doubleClickZoom={true}\r\n                scrollWheelZoom={true}\r\n                dragging={true}\r\n                animate={true}\r\n                easeLinearity={0.35}\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            >\r\n                <GeoJSON\r\n                    data={floor}\r\n                />\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(FloorPlan);","import React, { useEffect, useState } from 'react';\r\nimport { Avatar } from 'antd';\r\n\r\n\r\nconst Image = ({ image_ref, getImage }) => {\r\n\r\n    const [state, setstate] = useState()\r\n\r\n    useEffect(async () => {\r\n        !!image_ref && setstate(await getImage(image_ref))\r\n    }, [image_ref])\r\n\r\n\r\n    return (\r\n        <Avatar shape=\"square\" size={64} src={state} />\r\n    );\r\n}\r\n\r\nexport default Image;","import React, { useEffect, useState } from 'react';\r\nimport Image from './Image';\r\nimport { Table } from 'antd';\r\n\r\nconst UserList = ({ allPeople, getImage }) => {\r\n\r\n    console.log(allPeople.length)\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        allPeople.length !== 0 && setLoading(false)\r\n    }, [allPeople])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'ФИО',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Фото',\r\n            dataIndex: 'image_ref',\r\n            key: 'image_ref',\r\n            render: (text, row, index) => <Image key={text} getImage={getImage} image_ref={text} />\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Table\r\n                dataSource={allPeople}\r\n                columns={columns}\r\n                pagination={{ defaultPageSize: 15 }}\r\n                loading={loading}\r\n                bordered\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(UserList);","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport FloorPlan from './components/FloorPlan/FloorPlan';\nimport UserList from './components/UserList/UserList';\nimport { Row, Col } from 'antd';\n\nconst App = ({ floor, api }) => {\n  const { getAllPeople, getImage, getToken } = api;\n\n  const [allPeople, setAllPeople] = useState([])\n\n  useEffect(async () => {\n    await getToken()\n    setAllPeople(await getAllPeople())\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Complitech</h1>\n      <Row justify=\"space-between\">\n        <Col span={7}>\n          <UserList allPeople={[...allPeople]} getImage={getImage} />\n\n        </Col>\n        <Col span={14}>\n          <FloorPlan floor={floor} />\n        </Col>\n      </Row>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport floor from './data/floor.json';\nimport { api } from './api/api';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App floor={floor} api={api}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}